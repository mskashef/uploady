[{"F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\index.js":"1","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\App.js":"2","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\reportWebVitals.js":"3","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\HomePage\\HomePage.js":"4","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\AuthPage\\AuthPage.js":"5","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\DownloadPage\\DownloadPage.js":"6","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\constants.js":"7","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\components\\Footer\\Footer.js":"8","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\DashboardPage\\DashboardPage.js":"9","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\scripts.js":"10","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\ShortLinkPage\\ShortLinkPage.js":"11","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\components\\Modal\\Modal.js":"12"},{"size":535,"mtime":1608895904970,"results":"13","hashOfConfig":"14"},{"size":1213,"mtime":1608928401767,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1606848690951,"results":"16","hashOfConfig":"14"},{"size":1184,"mtime":1607750075438,"results":"17","hashOfConfig":"14"},{"size":2654,"mtime":1608895911192,"results":"18","hashOfConfig":"14"},{"size":8731,"mtime":1609512032358,"results":"19","hashOfConfig":"14"},{"size":1154,"mtime":1607749543298,"results":"20","hashOfConfig":"14"},{"size":1773,"mtime":1609511599896,"results":"21","hashOfConfig":"14"},{"size":13787,"mtime":1609512071265,"results":"22","hashOfConfig":"14"},{"size":324,"mtime":1608895305252,"results":"23","hashOfConfig":"14"},{"size":2753,"mtime":1608989275349,"results":"24","hashOfConfig":"14"},{"size":1906,"mtime":1609507661135,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"qwqf56",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\index.js",["57"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport axios from 'axios';\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["58","59"],"F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\App.js",["60"],"import './App.css';\nimport React from 'react';\nimport HomePage from \"./src/pages/HomePage/HomePage\";\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport AuthPage from \"./src/pages/AuthPage/AuthPage\";\nimport DownloadPage from \"./src/pages/DownloadPage/DownloadPage\";\nimport DashboardPage from \"./src/pages/DashboardPage/DashboardPage\";\nimport {ToastContainer, toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport ShortLinkPage from \"./src/pages/ShortLinkPage/ShortLinkPage\";\n\nfunction App(props) {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\" render={(props) => <HomePage {...props} />} exact/>\n                    <Route path=\"/auth\" component={AuthPage} exact/>\n                    <Route path=\"/download/:id\" component={DownloadPage} exact/>\n                    <Route path=\"/myPanel\" component={DashboardPage} exact/>\n                    <Route path=\"/:shortLink\" render={props => <ShortLinkPage {...props} />} exact/>\n                </Switch>\n            </BrowserRouter>\n            <ToastContainer position={\"top-center\"}/>\n        </div>\n    );\n}\n\nexport default App;\n","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\reportWebVitals.js",[],"F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\HomePage\\HomePage.js",[],"F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\AuthPage\\AuthPage.js",["61"],"import React , {useState, useEffect} from 'react';\r\nimport classes from './AuthPage.module.css';\r\nimport auth from '../../../assets/backgroundImages/auth.png';\r\nimport {authNavBarLinks} from \"../../constants\";\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {toast} from \"react-toastify\";\r\n\r\n\r\nconst AuthPage = props => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleLogin = () => {\r\n        const data = {\r\n            username: username,\r\n            password: password\r\n        };\r\n        axios\r\n            .post('/api/login', data, {withCredentials: true})\r\n            .then(res => {\r\n                if (res.data.success) {\r\n                    toast.success(res.data.msg);\r\n                    props.history.replace('/');\r\n                } else {\r\n                    toast.error(res.data.msg)\r\n                };\r\n            })\r\n            .catch(err => {});\r\n    };\r\n    return (\r\n        <div className={classes.wrapper} style={{backgroundImage: `url(${auth})`}}>\r\n            <ul className={classes.navbarWrapper}>\r\n                {authNavBarLinks.map(link => (\r\n                    <li className={link.box ? classes.box : ''}><Link to={link.linkTo}>{link.title}</Link></li>\r\n                ))}\r\n            </ul>\r\n            <div className={classes.card}>\r\n                <div className={classes.authTitle}>User Login</div>\r\n                <div className={classes.authDescription}>Sign in and start sharing your files!</div>\r\n                <input\r\n                    style={{color: username ? 'black' : '#666666'}}\r\n                    type={\"text\"}\r\n                    value={username}\r\n                    placeholder={\"Username\"}\r\n                    className={classes.authInput}\r\n                    onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <input\r\n                    style={{color: password ? 'black' : '#666666'}}\r\n                    type={\"password\"}\r\n                    value={password}\r\n                    placeholder={\"Password\"}\r\n                    className={classes.authInput}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <div className={classes.row}>\r\n                    <div className={classes.forgotPassword}>Forgot password?</div>\r\n                    <button className={classes.signInButton}>Sign Up</button>\r\n                </div>\r\n                <button className={classes.submit} onClick={handleLogin}>Login</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AuthPage;\r\n","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\DownloadPage\\DownloadPage.js",["62","63"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport classes from './DownloadPage.module.css';\r\nimport bg from '../../../assets/backgroundImages/download.png';\r\nimport {DownloadNavBarLinks} from \"../../constants\";\r\nimport {Link} from 'react-router-dom';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport {IconButton} from '@material-ui/core';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport {Container} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport CropIcon from '@material-ui/icons/Crop';\r\nimport FullScreenDialog from \"../../components/Modal/Modal\";\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\nconst isImage = (fileName) => {\r\n    if (!fileName || !fileName.includes('.')) return false;\r\n    return ['png', 'jpg', 'jpeg', 'bmp'].includes(fileName.slice(fileName.lastIndexOf('.') + 1));\r\n};\r\n\r\n/**\r\n * @param {HTMLImageElement} image - Image File Object\r\n * @param {Object} crop - crop Object\r\n * @param {String} fileName - Name of the returned file in Promise\r\n */\r\nfunction getCroppedImg(image, crop, fileName) {\r\n    const canvas = document.createElement('canvas');\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.drawImage(\r\n        image,\r\n        crop.x * scaleX,\r\n        crop.y * scaleY,\r\n        crop.width * scaleX,\r\n        crop.height * scaleY,\r\n        0,\r\n        0,\r\n        crop.width,\r\n        crop.height,\r\n    );\r\n\r\n    // As Base64 string\r\n    // const base64Image = canvas.toDataURL('image/jpeg');\r\n\r\n    let link = document.createElement('a');\r\n    link.download = fileName;\r\n    link.href = canvas.toDataURL();\r\n    link.click();\r\n\r\n    // As a blob\r\n    // return new Promise((resolve, reject) => {\r\n    //     canvas.toBlob(blob => {\r\n    //         blob.name = fileName;\r\n    //         resolve(blob);\r\n    //     }, 'image/jpeg', 1);\r\n    // });\r\n}\r\n\r\nconst DownloadPage = props => {\r\n    const [versions, setVersions] = useState([]);\r\n    const [version, setVersion] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [crop, setCrop] = useState({\r\n        unit: '%', // default, can be 'px' or '%'\r\n        x: 0,\r\n        y: 0,\r\n        width: 100,\r\n        height: 100\r\n    });\r\n    const [img, setImg] = useState(null);\r\n    useEffect(() => {\r\n        axios.get(`/api/getFileVersions/${props.match.params.id}`)\r\n            .then(res => {\r\n                // console.log(res.data);\r\n                setVersions(res.data);\r\n                setVersion(res.data[res.data.length - 1].version);\r\n            });\r\n    }, []);\r\n    const file = versions.find(v => v.version === version);\r\n    const link = 'http://localhost:5000' + file?.src;\r\n    return (\r\n        <div className={classes.wrapper}>\r\n\r\n            <div className={classes.backgroundImage} style={{backgroundImage: `url(${bg})`}}>\r\n                <Container>\r\n                    <ul className={classes.navbarWrapper}>\r\n                        {DownloadNavBarLinks?.map(link => (\r\n                            <li className={link.box ? classes.box : ''}><Link to={link.linkTo}>{link.title}</Link></li>\r\n                        ))}\r\n                    </ul>\r\n                </Container>\r\n                <h1 className={classes.upgradeYourAccount}>\r\n                    Upgrade<br/>\r\n                    Your Account\r\n                </h1>\r\n                <div className={classes.desc}>Pick a plan that best suits your needs</div>\r\n            </div>\r\n\r\n            <div className={classes.cards}>\r\n                <div className={classes.card}>\r\n                    <div className={classes.authTitle}>Guest</div>\r\n                    <div className={classes.authDescription}>Very Limited</div>\r\n                    <ul className={classes.ul}>\r\n                        <li>Very Low Download Speed</li>\r\n                        <li>No Hosting Space</li>\r\n                        <li>1024 MB Maximum Filesize</li>\r\n                        <li>Very Slow Download</li>\r\n                        <li>Min 60 Second Delay</li>\r\n                        <li>Delete File 10 Days After Last Download</li>\r\n                    </ul>\r\n                    <button className={classes.signInButton}>Be A Premium Now</button>\r\n                </div>\r\n                <div className={classes.card}>\r\n                    <div className={classes.authTitle}>Premium</div>\r\n                    <div className={classes.authDescription}>Unlimited</div>\r\n                    <ul className={classes.ul}>\r\n                        <li>From 1000 GB Space</li>\r\n                        <li>High Speed Download</li>\r\n                        <li>FTP Upload</li>\r\n                        <li>Remote URL Upload</li>\r\n                        <li>Fast & Direct Download</li>\r\n                        <li>Earn Money</li>\r\n                        <li>No Delay or Captcha</li>\r\n                        <li>24X7 Support</li>\r\n                        <li>No Advertise</li>\r\n                    </ul>\r\n                    <button className={classes.signInButton}>Be A Premium Now</button>\r\n                </div>\r\n                <div className={classes.card}>\r\n                    <div className={classes.authTitle}>Registered</div>\r\n                    <div className={classes.authDescription}>Limited</div>\r\n                    <ul className={classes.ul}>\r\n                        <li>100 GB Free Space</li>\r\n                        <li>Low Download Speed</li>\r\n                        <li>2048 MB Maximum Filesize</li>\r\n                        <li>Remote URL Upload</li>\r\n                        <li>Slow Download</li>\r\n                        <li>Min 30 Seconds Delay</li>\r\n                        <li>Delete File 30 Days After Last Download</li>\r\n                        <li>Earn Money</li>\r\n                    </ul>\r\n                    <button className={classes.signInButton}>Be A Premium Now</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <select value={version} onChange={e => setVersion(e.target.value)}>\r\n                    {versions?.map(v => <option value={v.version}>{v.version}</option>)}\r\n                </select>\r\n            </div>\r\n\r\n            <div className={classes.linkWrapper}>\r\n                <a href={link}>{link}</a>\r\n            </div>\r\n\r\n            <div className={classes.row}>\r\n                <div\r\n                    className={classes.downloadBtn}\r\n                    onClick={() => window.location.href = link}\r\n                >\r\n                    Download\r\n                </div>\r\n                <IconButton style={{color: '#090909', margin: \"0 -10px\"}}>\r\n                    <InfoIcon style={{width: 40, height: 40}}/>\r\n                </IconButton>\r\n                <IconButton style={{color: '#090909', margin: \"0 -10px\"}}>\r\n                    <ShareIcon style={{width: 40, height: 40}}/>\r\n                </IconButton>\r\n                <IconButton style={{color: 'red', margin: \"0 -10px\"}}>\r\n                    <FavoriteBorderIcon style={{width: 40, height: 40}}/>\r\n                </IconButton>\r\n                {isImage(file?.name) ? (\r\n                    <IconButton style={{color: 'steelblue', margin: \"0 -10px\"}} onClick={() => setOpen(true)}>\r\n                        <CropIcon style={{width: 40, height: 40}}/>\r\n                    </IconButton>\r\n                ) : null}\r\n            </div>\r\n            <FullScreenDialog\r\n                title={'Crop Image'}\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n            >\r\n                <div className={classes.modalBody}>\r\n                    <div className={classes.modalImageWrapper}>\r\n                        <ReactCrop\r\n                            src={file?.src}\r\n                            onChange={crop => setCrop(crop)}\r\n                            crop={crop}\r\n                            onImageLoaded={img => {\r\n                                setImg(img)\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        className={classes.downloadBtn}\r\n                        onClick={async () => await getCroppedImg(img, crop, file.name)}\r\n                    >\r\n                        Download Selected Part\r\n                    </div>\r\n                </div>\r\n            </FullScreenDialog>\r\n            <Footer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DownloadPage;\r\n","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\constants.js",[],"F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\components\\Footer\\Footer.js",[],"F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\DashboardPage\\DashboardPage.js",["64"],"import React, {useState, useEffect} from 'react';\r\nimport classes from './DashboardPage.module.css';\r\nimport logo from '../../../assets/logo.svg';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {IconButton} from '@material-ui/core';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\nimport AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport axios from 'axios';\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {checkAuthentication, getToken, getUsername} from \"../../../scripts\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nconst DrawerItem = props => {\r\n    const Icon = props.icon;\r\n    return (\r\n        <div className={classes.drawerItem} onClick={props.onClick}>\r\n            <Icon className={classes.drawerIcon}/>\r\n            <div className={classes.drawerItemTitle}>{props.title}</div>\r\n        </div>\r\n    )\r\n};\r\nconst DashboardPage = props => {\r\n    checkAuthentication(props.history);\r\n    const username = getUsername();\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n    const [file, setFile] = useState(null);\r\n    const [updateFor, setUpdateFor] = useState('');\r\n    const [version, setVersion] = useState('');\r\n    const [searchText, setSearchText] = useState('');\r\n    const [redirectLogin, setRedirectLogin] = useState('');\r\n    const [files, setFiles] = useState([]);\r\n\r\n    const handleLogout = () => {\r\n        axios.delete('/api/logout').then(res => window.location.reload(), err => {\r\n        });\r\n    };\r\n\r\n    const handleDeleteFile = (fid, vid) => {\r\n        axios.delete(`/api/deleteFile/${fid}/${vid}`).then(res => {\r\n            setTimeout(getMyFiles, 1200);\r\n        }).catch(err => {\r\n            toast.error('An error occurred!');\r\n        })\r\n    };\r\n\r\n    const handleUpload = () => {\r\n        if (!file) return;\r\n        const data = new FormData();\r\n        if (!version.trim()) return toast.error('The Version Name field can not be empty!');\r\n        data.append('version', version);\r\n        if (isUpdate) {\r\n            if (!updateFor.trim() || !version.trim()) return toast.error('Enter both file id and version name!');\r\n            data.append('updateFor', updateFor);\r\n        }\r\n        data.append('file', file);\r\n        axios\r\n            .post('/api/upload', data, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                },\r\n                withCredentials: true\r\n            }).then(res => {\r\n            if (res.data.redirect) setRedirectLogin(res.data.redirect);\r\n            setFile(null);\r\n            setVersion('');\r\n            setUpdateFor('');\r\n            setTimeout(getMyFiles, 1200);\r\n        }, err => console.log(err));\r\n    };\r\n    const getMyFiles = () => {\r\n        axios.get('/api/getMyFiles').then(res => {\r\n            console.log(res.data)\r\n            setFiles(res.data);\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMyFiles();\r\n    }, []);\r\n\r\n    const used = files?.map(file => file.size)?.reduce((sum, cur) => sum + cur, 0);\r\n    let usedSize = files?.map(file => file.size)?.reduce((sum, cur) => sum + cur, 0);\r\n    let unit = \"B\";\r\n    if (usedSize >= 1000) {\r\n        usedSize /= 1000;\r\n        unit = 'KB';\r\n    }\r\n    if (usedSize >= 1000) {\r\n        usedSize = Math.floor(usedSize) / 1000;\r\n        unit = 'MB';\r\n    }\r\n    if (usedSize >= 1000) {\r\n        usedSize = Math.floor(usedSize) / 1000;\r\n        unit = 'GB';\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            {redirectLogin && <Redirect to={redirectLogin}/>}\r\n            <div className={classes.titleBar}>\r\n                <img src={logo} alt={\"UPLOADY\"} className={classes.logo}/>\r\n                <div className={classes.menuIcon}><MenuIcon style={{color: '#FFFFFF', width: 40, height: 40}}/></div>\r\n                <div style={{flex: 1}}/>\r\n                <div className={classes.menuIcon}><MailIcon style={{color: '#FFFFFF', width: 40, height: 40}}/></div>\r\n                <AccountCircleIcon style={{color: '#FFFFFF', width: 40, height: 40}}/>\r\n                <div className={classes.user}>{username}</div>\r\n                <ArrowDropDownIcon style={{color: '#FFFFFF', width: 40, height: 40, marginRight: 20}}/>\r\n            </div>\r\n            <div className={classes.div}>\r\n                <div className={classes.drawer}>\r\n                    <div className={classes.navTitle}>Navigation</div>\r\n                    <DrawerItem icon={HomeIcon} title={'Home'}/>\r\n                    <DrawerItem icon={FolderIcon} title={'My Files'}/>\r\n                    <DrawerItem icon={MonetizationOnIcon} title={'My Earnings'}/>\r\n                    <DrawerItem icon={LocalAtmIcon} title={'Premium'}/>\r\n                    <DrawerItem icon={AssessmentIcon} title={'Reports'}/>\r\n                    <DrawerItem icon={SettingsIcon} title={'User & Payment Settings'}/>\r\n                    <DrawerItem icon={ChatIcon} title={'File Comments'}/>\r\n                    <DrawerItem icon={FavoriteIcon} title={'Favorite Files'}/>\r\n                    <DrawerItem icon={HelpOutlineIcon} title={'Training'}/>\r\n                    <DrawerItem icon={PowerSettingsNewIcon} title={'Logout'} onClick={handleLogout}/>\r\n                </div>\r\n                <div className={classes.body}>\r\n                    <div className={classes.bodyTitleBar}>\r\n                        <FolderIcon style={{color: '#13262C'}}/>\r\n                        <div className={classes.bodyTitle}>My Files</div>\r\n                        <button className={classes.uploadButton}>\r\n                            <CloudUploadIcon/>\r\n                            <div className={classes.uploadButtonText}>Upload</div>\r\n                        </button>\r\n                    </div>\r\n                    <div className={classes.tableWrapper}>\r\n                        <div className={classes.tableTitle}>Report</div>\r\n                        <div className={classes.report}>\r\n                            <div className={classes.reportItem}>\r\n                                <b>56$</b>\r\n                                <div className={classes.reportProp}>Earnings</div>\r\n                            </div>\r\n                            <div className={classes.reportItem}>\r\n                                <b>3261</b>\r\n                                <div className={classes.reportProp}>Total Clicks</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.usageWrapper}>\r\n                            <div className={classes.usageTextContainer}>\r\n                                <div className={classes.usageText} style={{flex: 1}}>\r\n                                    {usedSize + ' ' + unit}\r\n                                    &nbsp;of 100.0 GB\r\n                                </div>\r\n                                <div className={classes.usageText}>{files.length} files</div>\r\n                            </div>\r\n                            <div className={classes.usageRange}>\r\n                                <div className={classes.usageRangeValue} style={{width: used / (100 * 1024 * 1024 * 1024) * 100 + '%'}}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.searchBarWrapper}>\r\n                        <input type={\"search\"} placeholder={'search in files...'}\r\n                               onChange={e => setSearchText(e.target.value)}/>\r\n                        <button className={classes.searchButton}>Search</button>\r\n                    </div>\r\n                    <div className={classes.tableWrapper}>\r\n                        <div className={classes.tableTitle}>Files</div>\r\n                        <table className={classes.table} cellPadding=\"0\" cellSpacing=\"0\">\r\n                            <thead>\r\n                            <td>ID</td>\r\n                            <td>VID</td>\r\n                            <td>Name</td>\r\n                            <td>Short Link</td>\r\n                            <td>Version</td>\r\n                            <td>Size</td>\r\n                            <td>date</td>\r\n                            <td>Delete</td>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                files.length > 0 ? (\r\n                                    (searchText.trim() ? files.filter(f => f.display_name.toLowerCase().includes(searchText.toLowerCase().trim())) : files)?.map(file => (\r\n                                        <tr>\r\n                                            <td>{file.fid}</td>\r\n                                            <td>{file.vid}</td>\r\n                                            <td>{file.display_name}</td>\r\n                                            <td><Link to={`/${file.shortId}`}>{file.shortId}</Link></td>\r\n                                            <td>{file.version}</td>\r\n                                            <td>{file.size}</td>\r\n                                            <td>{new Date(file.upload_date).toLocaleString()}</td>\r\n                                            <td>\r\n                                                <DeleteForeverIcon\r\n                                                    style={{color: 'red', cursor: 'pointer'}}\r\n                                                    onClick={() => handleDeleteFile(file.fid, file.vid)}\r\n                                                />\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                ) : <tr>\r\n                                    <td colSpan={100}>No Files Yet...</td>\r\n                                </tr>\r\n                            }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className={classes.tableWrapper}>\r\n                        <div className={classes.tableTitle}>Upload</div>\r\n                        <input type={\"file\"} id={\"fileInput\"} style={{display: 'none'}} onChange={e => {\r\n                            setFile(e.target.files[0]);\r\n                            console.log(e.target.files[0]);\r\n                        }}/>\r\n                        <div className={classes.fileInput}>\r\n                            <div className={classes.file}>{file?.name}</div>\r\n                            <label className={classes.fileUploadLabel} htmlFor={'fileInput'}>\r\n                                <div className={classes.uploadButtonText}>Select File</div>\r\n                            </label>\r\n                        </div>\r\n                        <div style={{paddingLeft: 20}}>\r\n                            <br/>\r\n                            Version Name:\r\n                            <input\r\n                                type='text'\r\n                                className={classes.fileId}\r\n                                value={version}\r\n                                onChange={e => setVersion(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className={classes.update}>\r\n                            {\r\n                                isUpdate ? (\r\n                                    <IconButton style={{color: 'green'}}\r\n                                                onClick={() => setIsUpdate(isUpdate => !isUpdate)}>\r\n                                        <CheckBoxIcon/>\r\n                                    </IconButton>\r\n                                ) : (\r\n                                    <IconButton style={{color: 'gray'}}\r\n                                                onClick={() => setIsUpdate(isUpdate => !isUpdate)}>\r\n                                        <CheckBoxOutlineBlankIcon/>\r\n                                    </IconButton>\r\n                                )\r\n                            }\r\n                            This is an update for file with id:\r\n                            <input\r\n                                type='text'\r\n                                className={classes.fileId}\r\n                                disabled={!isUpdate}\r\n                                value={updateFor}\r\n                                onChange={e => setUpdateFor(e.target.value)}\r\n                            />\r\n                            <div className={classes.finalUploadButton} onClick={handleUpload}>\r\n                                <CloudUploadIcon/>\r\n                                <div className={classes.uploadButtonText}>Upload</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/*<Footer/>*/}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DashboardPage;\r\n","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\scripts.js",[],"F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\pages\\ShortLinkPage\\ShortLinkPage.js",["65","66","67"],"import React, {useEffect, useState} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport axios from 'axios';\r\nfunction convertBase(str, fromBase, toBase) {\r\n    const DIGITS = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    const add = (x, y, base) => {\r\n        let z = [];\r\n        const n = Math.max(x.length, y.length);\r\n        let carry = 0;\r\n        let i = 0;\r\n        while (i < n || carry) {\r\n            const xi = i < x.length ? x[i] : 0;\r\n            const yi = i < y.length ? y[i] : 0;\r\n            const zi = carry + xi + yi;\r\n            z.push(zi % base);\r\n            carry = Math.floor(zi / base);\r\n            i++;\r\n        }\r\n        return z;\r\n    }\r\n    const multiplyByNumber = (num, x, base) => {\r\n        if (num < 0) return null;\r\n        if (num == 0) return [];\r\n\r\n        let result = [];\r\n        let power = x;\r\n        while (true) {\r\n            num & 1 && (result = add(result, power, base));\r\n            num = num >> 1;\r\n            if (num === 0) break;\r\n            power = add(power, power, base);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    const parseToDigitsArray = (str, base) => {\r\n        const digits = str.split('');\r\n        let arr = [];\r\n        for (let i = digits.length - 1; i >= 0; i--) {\r\n            const n = DIGITS.indexOf(digits[i])\r\n            if (n == -1) return null;\r\n            arr.push(n);\r\n        }\r\n        return arr;\r\n    }\r\n    const digits = parseToDigitsArray(str, fromBase);\r\n    if (digits === null) return null;\r\n    let outArray = [];\r\n    let power = [1];\r\n    for (let i = 0; i < digits.length; i++) {\r\n        digits[i] && (outArray = add(outArray, multiplyByNumber(digits[i], power, toBase), toBase));\r\n        power = multiplyByNumber(fromBase, power, toBase);\r\n    }\r\n    let out = '';\r\n    for (let i = outArray.length - 1; i >= 0; i--)\r\n        out += DIGITS[outArray[i]];\r\n    return out;\r\n}\r\n\r\nconst ShortLinkPage = props => {\r\n    const [canRedirect, setCanRedirect] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const redirectTo = '/download/' + convertBase(props.match.params.shortLink, 62, 10);\r\n    useEffect(() => {\r\n        console.log(`/api/fileExists/${convertBase(props.match.params.shortLink, 62, 10)}`);\r\n        axios.get(`/api/fileExists/${convertBase(props.match.params.shortLink, 62, 10)}`).then(res => {\r\n            if (res.data.exists === '1') {\r\n                setCanRedirect(true);\r\n            } else {\r\n                setError(\"404\");\r\n            }\r\n        })\r\n    }, []);\r\n    return (\r\n        <div>\r\n\r\n            {error ? 'Redirecting...' : error}\r\n            {canRedirect && <Redirect to={redirectTo} />}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ShortLinkPage;\r\n","F:\\MK\\University\\Term 7\\InternetEngineering\\project-1\\uploady\\src\\src\\components\\Modal\\Modal.js",[],{"ruleId":"68","severity":1,"message":"69","line":6,"column":8,"nodeType":"70","messageId":"71","endLine":6,"endColumn":13},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"68","severity":1,"message":"76","line":8,"column":25,"nodeType":"70","messageId":"71","endLine":8,"endColumn":30},{"ruleId":"68","severity":1,"message":"77","line":1,"column":27,"nodeType":"70","messageId":"71","endLine":1,"endColumn":36},{"ruleId":"68","severity":1,"message":"78","line":1,"column":37,"nodeType":"70","messageId":"71","endLine":1,"endColumn":43},{"ruleId":"79","severity":1,"message":"80","line":84,"column":8,"nodeType":"81","endLine":84,"endColumn":10,"suggestions":"82"},{"ruleId":"68","severity":1,"message":"83","line":25,"column":30,"nodeType":"70","messageId":"71","endLine":25,"endColumn":38},{"ruleId":"84","severity":1,"message":"85","line":23,"column":17,"nodeType":"86","messageId":"87","endLine":23,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":41,"column":19,"nodeType":"86","messageId":"87","endLine":41,"endColumn":21},{"ruleId":"79","severity":1,"message":"88","line":73,"column":8,"nodeType":"81","endLine":73,"endColumn":10,"suggestions":"89"},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'toast' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["92"],"'getToken' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'props.match.params.shortLink'. Either include it or remove the dependency array.",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [props.match.params.id]",{"range":"98","text":"99"},"Update the dependencies array to be: [props.match.params.shortLink]",{"range":"100","text":"101"},[2868,2870],"[props.match.params.id]",[2549,2551],"[props.match.params.shortLink]"]